{
  "_args": [
    [
      "http_request",
      "/Users/pccrazy/backend"
    ]
  ],
  "_from": "http_request@latest",
  "_id": "http_request@0.1.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/http_request",
  "_npmUser": {
    "email": "me@ranmizrahi.com",
    "name": "ranm8"
  },
  "_npmVersion": "1.2.25",
  "_phantomChildren": {},
  "_requested": {
    "name": "http_request",
    "raw": "http_request",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/http_request/-/http_request-0.1.2.tgz",
  "_shasum": "e146aa2eb5df4bdfe281c5cce99b18bc8f0068d8",
  "_shrinkwrap": null,
  "_spec": "http_request",
  "_where": "/Users/pccrazy/backend",
  "author": {
    "email": "ranm@codeoasis.com",
    "name": "Ran Mizrahi"
  },
  "bugs": {
    "url": "https://github.com/ranm8/http-request/issues"
  },
  "dependencies": {
    "q": "~0.9.3",
    "underscore": "~1.4.4"
  },
  "description": "http-request is a nodeJS module that simplifies HTTP request making",
  "devDependencies": {
    "chai": "~1.6.1",
    "mocha": "~1.9.0",
    "rewire": "~1.1.3",
    "sinon": "~1.7.2"
  },
  "directories": {},
  "dist": {
    "shasum": "e146aa2eb5df4bdfe281c5cce99b18bc8f0068d8",
    "tarball": "http://registry.npmjs.org/http_request/-/http_request-0.1.2.tgz"
  },
  "engines": {
    "node": "~0.10.x"
  },
  "homepage": "https://github.com/ranm8/http-request#readme",
  "maintainers": [
    {
      "email": "me@ranmizrahi.com",
      "name": "ranm8"
    }
  ],
  "name": "http_request",
  "optionalDependencies": {},
  "readme": "http-request - Simplifies nodeJS HTTP requests [![Build Status](https://secure.travis-ci.org/ranm8/http-request.png?branch=master)](http://travis-ci.org/ranm8/http-request)\n==============================================\n\nhttp-request is a nodeJS module that simplifies HTTP request making.\n\nImportent to note, this module is still under development and can be unstable!\n\n## Install\n\n\tnpm install http_request  \n\n\n## Ease of use\n\nhttp-request is extremely easy to use and always return a promise (using the great Q module)...\n\nSimply require the module and start requesting:\n\n\tvar httpRequest = require('http_request'); \n\nGET Request:\n\n\thttpRequest.get('http://example.com').then(function(response) {\n\t\t// Get the response body\n\t\tresponse.getBody();\n\t});\n\nPOST Request in JSON:\n\n\thttpRequest.post('http://example.com', {\n\t\t\tbody: {\n\t\t\t\thello: 'world'\n\t\t\t}\n\t\t})\n\t\t.then(function(response) {\n\t\t\t// Get the response body\n\t\t\tresponse.getBody();\n\t\t});\n\n\n## API\n\n### options\n\n#### method {string} \nHTTP method to use, can be one of the following methods: POST | GET | DELETE | HEAD | PUT.\n\n#### body {object|string}\nCan be either an object (key, val) or a string, will be formatted depending on the dataType property and served via response body.\n\n#### headers {object} \n(key, value) object of headers (some headers like content-length are set by default)\n\n#### `cookies` {object} \n(key, value) object of cookies to encode and serve via the request header.\n\n#### auth {{ username: string, password: string }} \nAdds Basic authintication header with given username and password\n\n#### dataType {string} \n\nDetermines the request data type (json|form-url-encoded), this option will encode the request body according to the given dataType and will add the appropriate header (defaults to json). \n\nIf null will be given, the body will be served as string.\n\n### httpRequest.request(url, options)\n\nExecutes a custom request according to options object\n\n\thttpRequest.request('https://example.com/api/foo', {\n\t\tmethod: 'POST',\n\t\tbody: {\n\t\t\tfoo: 'bar'\n\t\t\tbar: 'foo'\n\t\t},\n\t\theaders: {\n\t\t\t'X-Forwarded-By': 'me'\n\t\t},\n\t\tcookies: {\n\t\t\tmySession: 'some cookie value'\n\t\t},\n\t\tauth: {\n\t\t\tusername: 'foo',\n\t\t\tpassword: 'bar'\n\t\t},\n\t\tdataType: 'json'\t\t\n\t})\n\t.then(function(response) {\n\t\t// get the response body\n\t\tresponse.getBody();\n\t\t\n\t\t// get the response headers\n\t\tresponse.getHeaders();\n\t\t\n\t\t// get specific response header\n\t\tresponse.getHeader('Accept');\n\t\t\n\t\t// get the code\n\t\tresponse.getCode();\n\t});\n\n### httpRequest.get(url, options)\n\nExceutes a GET method request\n\n\thttpRequest.get('http://example.com').then(function(response) {\n\t\t// Get the response body\n\t\tresponse.getBody();\n\t});\n\n### httpRequest.post(url, options)\n\nExceutes a POST method request\n\n\thttpRequest.post('http://example.com', {\n\t\tbody: {\n\t\t\thello: 'world'\n\t\t}\n\t})\n\t.then(function(response) {\n\t\t// Get the response body\n\t\tresponse.getBody();\n\t});\n\n\n### httpRequest.put(url, options)\n\nExceutes a PUT method request\n\n\thttpRequest.put('http://example.com', {\n\t\tbody: 'some file content',\n\t\tdataType: null\t\n\t})\n\t.then(function(response) {\n\t\t// Get the response body\n\t\tresponse.getBody();\n\t});\n\n\n### httpRequest.del(url, options)\n\nExceutes a DELETE method request\n\n\thttpRequest.del('http://example.com').then(function(response) {\n\t\t// Get the response body\n\t\tresponse.getBody();\n\t});\n\n\n### httpRequest.head(url, options)\n\nExceutes a HEAD method request\n\t\n\thttpRequest.head('http://example.com').then(function(response) {\n\t\t// Get the response code\n\t\tresponse.getCode();\n\t});\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ranm8/http-request.git"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "tags": [
    "http",
    "request",
    "http-request",
    "simple",
    "web services",
    "util"
  ],
  "version": "0.1.2",
  "warnings": [
    {
      "code": "ENOTSUP",
      "pkgid": "http_request@0.1.2",
      "required": {
        "node": "~0.10.x"
      }
    },
    {
      "code": "ENOTSUP",
      "pkgid": "http_request@0.1.2",
      "required": {
        "node": "~0.10.x"
      }
    }
  ]
}
